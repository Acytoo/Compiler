*terminals
ID
VOID
INT
CHAR
FLOAT
LONG
$ 以美元符号开头的是注释
$ 注意：不能有空行， 会增加一层判断， 意义不大并且影响程序效率
DOUBLE
SHORT
STRING_LITERAL
(
)
[
]
,
;
{
}
=
:
>
<
>=
<=
!=
==
=
+=
-=
*=
/=
%=
+
-
*
/
%
&
~
++
--
!
#
int
float
double
short
long
while
if
else
*formulas
<program>                   ::= <translation_unit>
<translation_unit>          ::= <external_declaration> <translation_unit>
<translation_unit>          ::=
<external_declaration>      ::= <func_declaration>
<declaration>               ::= <declaration_specifiers> A21 ;
<init_declarator>           ::=
<init_declarator>           ::= <initializer>
<initializer>               ::= <assignment_expression>
<initializer>               ::= { <initializer_list> }
<initializer_list>          ::= <initializer> , <initializer_list>
<func_declaration>          ::= <declaration_specifiers> <declarator> <declaration_list> <compound_stmt>
<declaration_list>          ::=
<declaration_list>          ::= <declaration> A22 <declaration_list>
<declaration_specifiers>    ::= <type_specifier> ID A31
<declarator>                ::= ( <parameter_type_list> )
<declarator>                ::=
<parameter_type_list>       ::= <parameter_list>
<parameter_type_list>       ::=
<parameter_list>            ::= <parameter_declaration>
<parameter_declaration>     ::= <declaration_specifiers> <declarator>
<parameter_declaration>     ::= <declaration_specifiers>
<stmt>                      ::= <compound_stmt>
<stmt>                      ::= <iter_stmt>
<stmt>                      ::= <selection_stmt>
<stmt>                      ::= <expression_stmt>
<expression_stmt>           ::= ;
<expression_stmt>           ::= <expression> ;
<compound_stmt>             ::= { <stmt_list> }
<compound_stmt>             ::= { <declaration_list> <stmt_list> }
<stmt_list>                 ::=
<stmt_list>                 ::= <stmt> <stmt_list>
<iter_stmt>                 ::= while ( <primary_expression> ) A91 <stmt> A92
<selection_stmt>            ::= if ( <primary_expression> ) A81 <stmt> A82
<type_specifier>            ::= int A11
<type_specifier>            ::= float A12
<type_specifier>            ::= double A13
<type_specifier>            ::= short A14
<type_specifier>            ::= long A15
<constant>                  ::= INT A41
<constant>                  ::= FLOAT A42
<constant>                  ::= SHORT A43
<constant>                  ::= LONG A44
<compare_op>                ::= >
<compare_op>                ::= <
<compare_op>                ::= ==
<compare_op>                ::= >=
<compare_op>                ::= <=
<compare_op>                ::= ==
<compare_op>                ::= !=
<unary_op>                  ::= &
<unary_op>                  ::= *
<unary_op>                  ::= +
<unary_op>                  ::= -
<unary_op>                  ::= ~
<unary_op>                  ::= !
<assignment_op>             ::= =
<assignment_op>             ::= -=
<assignment_op>             ::= +=
<assignment_op>             ::= *=
<assignment_op>             ::= /=
<assignment_op>             ::= %=
<expression>                ::= ID = <unary_expression> A62 <factor_expression> A61
<factor_expression>         ::=
<factor_expression>         ::= + <unary_expression> A101
<factor_expression>         ::= - <unary_expression> A103
<factor_expression>         ::= * <unary_expression> A102
<factor_expression>         ::= / <unary_expression> A104
<compare_expression>        ::= <primary_expression> <compare_op> <primary_expression>
<assignment_expression>     ::= += <unary_expression>
<assignment_expression>     ::= -= <unary_expression>
<primary_expression>        ::= ID A51
<primary_expression>        ::= <constant> A52
<primary_expression>        ::= STRING_LITERAL
<primary_expression>        ::= ( <expression> )
<unary_expression>          ::= <primary_expression> A71
<unary_expression>          ::= ++ <unary_expression> A72
<unary_expression>          ::= -- <unary_expression> A73
<unary_expression>          ::= <unary_op> <unary_expression>
*end
